
package IssueTracker;

import ConnectionToDatabase.Cnx;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;


public class ProjectDashboard extends javax.swing.JFrame {

    private String userName = "username";// temporary can be deleted later
    private ArrayList<ProjectTable> projectList;
    /**
     * Creates new form ProjectDashboard
     */
    public ProjectDashboard(String userName){
       this();
       this.userName = userName;
    }
    public ProjectDashboard() {
        initComponents();
        this.setLocationRelativeTo(null); //to let the form adjust to the center of our computer screen
        projectList = new ArrayList<>();
        insertTableContents(); // show the contents of table 'project' from database
    }
    
    
    
    /**
     * method to store data from database into ArrayList before inserting it into table GUI
     * ProjectTable class is defined in the same package
     * @return ArrayList of type ProjectTable
     */
    public ArrayList<ProjectTable> createList(){
        
            
        try {
            Cnx connectionClass = new Cnx(); //establish connection
            Connection connection = connectionClass.getConnection(); //establish connection
            
            int projectID;
            String projectName;
            String description;
            int issueCount;
            
            String query1 = "SELECT* FROM project"; //query to select all from table named 'project'
            String query2;
            Statement st = connection.createStatement(); //create a statement using connection that already establish
            Statement st2 = connection.createStatement();
            
            ResultSet result1 = st.executeQuery(query1); // execute query1 and store the result into result1
            ResultSet result2;
            
            while(result1.next()){
                projectID = result1.getInt("projectID"); //get the data inside column 'projectID'(one of the column for table 'project') and store it into variable projectID
                projectName = result1.getString("projectName");
                description = result1.getString("projectDetails");
                query2 = "SELECT COUNT(*) FROM issue WHERE projectID = "+projectID; // query to calculate how many issues with the same projectID are inside table 'issue'
                result2 = st2.executeQuery(query2);
                result2.next();
                issueCount = result2.getInt(""); // get count for issue with same projectID;     "" is because the column 'count' returned by database is not named
                projectList.add(new ProjectTable(projectID,projectName,description,issueCount)); // instantiate ProjectTable object and insert it into ArrayList
                
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(ProjectDashboard.class.getName()).log(Level.SEVERE, null, ex); // will just print the errors to our console
        }
        return projectList; //return the ArrayList
    }
    
    
    
    /**
     * method to insert data stored inside ArrayList to the table GUI
     * @return nothing
     */
    public void insertTableContents(){
        ArrayList<ProjectTable> list = createList(); // object referring to the ArrayList created inside createList();
        DefaultTableModel tableModel = (DefaultTableModel)projectTable.getModel(); // get the model of table GUI
        Object[] row = new Object[4];
        for(int i = 0; i<list.size(); i++){  
            row[0] = list.get(i).getProjectID(); //assign the projectID data located at a specific index in arrayList to row[0]
            row[1] = list.get(i).getProjectName();
            row[2] = list.get(i).getDescription();
            row[3] = list.get(i).getIssueCount();
            tableModel.addRow(row); //inserting data into specific row of table GUI
        }
    }

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        projectTable = new javax.swing.JTable();
        createProject = new javax.swing.JButton();
        importExportFormButton = new javax.swing.JButton();
        searchTextField = new javax.swing.JTextField();
        chatButton = new javax.swing.JButton();
        projectIDSortButton = new javax.swing.JButton();
        projectNameSortButton = new javax.swing.JButton();
        sortLabel = new javax.swing.JLabel();
        reportButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Project Board");

        projectTable.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        projectTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Project Name", "Description", "Issues"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        projectTable.setRowHeight(20);
        projectTable.getTableHeader().setReorderingAllowed(false);
        projectTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                projectTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(projectTable);
        if (projectTable.getColumnModel().getColumnCount() > 0) {
            projectTable.getColumnModel().getColumn(0).setMinWidth(40);
            projectTable.getColumnModel().getColumn(0).setPreferredWidth(40);
            projectTable.getColumnModel().getColumn(0).setMaxWidth(40);
            projectTable.getColumnModel().getColumn(3).setMinWidth(60);
            projectTable.getColumnModel().getColumn(3).setPreferredWidth(60);
            projectTable.getColumnModel().getColumn(3).setMaxWidth(60);
        }

        createProject.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        createProject.setText("Create Project");
        createProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createProjectActionPerformed(evt);
            }
        });

        importExportFormButton.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        importExportFormButton.setText("Import/Export JSON");
        importExportFormButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importExportFormButtonActionPerformed(evt);
            }
        });

        searchTextField.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        searchTextField.setForeground(new java.awt.Color(153, 153, 153));
        searchTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        searchTextField.setText("Search");
        searchTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchTextFieldFocusLost(evt);
            }
        });
        searchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchTextFieldKeyPressed(evt);
            }
        });

        chatButton.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        chatButton.setText("Chat Room");
        chatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chatButtonActionPerformed(evt);
            }
        });

        projectIDSortButton.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        projectIDSortButton.setText("ID");
        projectIDSortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectIDSortButtonActionPerformed(evt);
            }
        });

        projectNameSortButton.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        projectNameSortButton.setText("Name");
        projectNameSortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectNameSortButtonActionPerformed(evt);
            }
        });

        sortLabel.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        sortLabel.setText("Sort By:");

        reportButton.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        reportButton.setText("Report");
        reportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 631, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(sortLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(projectIDSortButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(projectNameSortButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(89, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(188, 188, 188)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 284, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(129, 129, 129)
                .addComponent(createProject)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(importExportFormButton)
                .addGap(7, 7, 7)
                .addComponent(chatButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(reportButton)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(projectIDSortButton)
                    .addComponent(projectNameSortButton)
                    .addComponent(sortLabel))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chatButton)
                    .addComponent(createProject)
                    .addComponent(importExportFormButton)
                    .addComponent(reportButton))
                .addContainerGap(84, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    /**
     * method to go to Issue Dashboard
     * @param evt (when the event occur, button is clicked) 
     */
    private void projectTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_projectTableMouseClicked
        
        int row = projectTable.getSelectedRow(); //get the row which the user clicked on
        TableModel tableModel = projectTable.getModel(); // get the table model
        int projectID = (int)tableModel.getValueAt(row, 0); // get the data inside column projectID, to be passed to Issue Dashbord form
        IssueDashboard issueDashboard = new IssueDashboard(projectID,userName); 
        this.dispose(); //dispose the current ProjectDashboard GUI
        issueDashboard.setVisible(true); 
       
    }//GEN-LAST:event_projectTableMouseClicked

    
    /**
     * method to go to ProjectCreationForm GUI
     * @param evt (when even occur, button is clicked)
     */
    private void createProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createProjectActionPerformed
        
        ProjectCreationForm projectCreationForm = new ProjectCreationForm(userName);
        projectCreationForm.setVisible(true); // set the ProjectCreationForm GUI so that it is visible
        this.dispose(); // dispose this ProjectDashboard form
    }//GEN-LAST:event_createProjectActionPerformed

    private void importExportFormButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importExportFormButtonActionPerformed
        
        ImportExportForm importExportForm = new ImportExportForm(userName);
        importExportForm.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_importExportFormButtonActionPerformed

    private void searchTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            SearchForm searchForm = new SearchForm(searchTextField.getText(),userName);
            searchForm.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_searchTextFieldKeyPressed

    private void searchTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchTextFieldFocusGained
        if(searchTextField.getText().trim().toLowerCase().equals("search")){
            searchTextField.setText("");
            searchTextField.setForeground(Color.black);
        }
    }//GEN-LAST:event_searchTextFieldFocusGained

    private void searchTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchTextFieldFocusLost
        if(searchTextField.getText().trim().toLowerCase().equals("search")||
                searchTextField.getText().trim().equals("")){
            searchTextField.setText("search");
            searchTextField.setForeground(new Color(153,153,153));
        }
    }//GEN-LAST:event_searchTextFieldFocusLost

    private void chatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chatButtonActionPerformed
        try {
            ChatForm chatForm = new ChatForm(userName);
            chatForm.setVisible(true);
            this.dispose();
        } catch (SQLException ex) {
            Logger.getLogger(ProjectDashboard.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(ProjectDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_chatButtonActionPerformed

    private void projectIDSortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectIDSortButtonActionPerformed
        for(int i = 1; i<projectList.size(); i++){
            for(int j = 0; j<projectList.size()-i; j++){
                if(projectList.get(j).getProjectID()>projectList.get(j+1).getProjectID()){
                    projectList.add(j, projectList.remove(j+1));
                }
            }
        }
        
        DefaultTableModel tableModel = (DefaultTableModel)projectTable.getModel(); // get the model of table GUI
        tableModel.setRowCount(0);
        Object[] row = new Object[4];
        for(int i = 0; i<projectList.size(); i++){  
            row[0] = projectList.get(i).getProjectID(); //assign the projectID data located at a specific index in arrayList to row[0]
            row[1] = projectList.get(i).getProjectName();
            row[2] = projectList.get(i).getDescription();
            row[3] = projectList.get(i).getIssueCount();
            tableModel.addRow(row); //inserting data into specific row of table GUI
        }
    }//GEN-LAST:event_projectIDSortButtonActionPerformed

    private void projectNameSortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectNameSortButtonActionPerformed
        for(int i = 1; i<projectList.size(); i++){
            for(int j = 0; j<projectList.size()-i; j++){
                if(projectList.get(j).getProjectName().compareTo(projectList.get(j+1).getProjectName())>0){
                    projectList.add(j, projectList.remove(j+1));
                }
            }
        }
        
        DefaultTableModel tableModel = (DefaultTableModel)projectTable.getModel(); // get the model of table GUI
        tableModel.setRowCount(0);
        Object[] row = new Object[4];
        for(int i = 0; i<projectList.size(); i++){  
            row[0] = projectList.get(i).getProjectID(); //assign the projectID data located at a specific index in arrayList to row[0]
            row[1] = projectList.get(i).getProjectName();
            row[2] = projectList.get(i).getDescription();
            row[3] = projectList.get(i).getIssueCount();
            tableModel.addRow(row); //inserting data into specific row of table GUI
        }
    }//GEN-LAST:event_projectNameSortButtonActionPerformed

    private void reportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportButtonActionPerformed
        ReportGeneration reportGeneration = new ReportGeneration(userName);
        reportGeneration.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_reportButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProjectDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProjectDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProjectDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProjectDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProjectDashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chatButton;
    private javax.swing.JButton createProject;
    private javax.swing.JButton importExportFormButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton projectIDSortButton;
    private javax.swing.JButton projectNameSortButton;
    private javax.swing.JTable projectTable;
    private javax.swing.JButton reportButton;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JLabel sortLabel;
    // End of variables declaration//GEN-END:variables
}
